//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/NewInputSystem/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""CarMovement"",
            ""id"": ""031e07b5-48ed-4de9-9ec6-a3d8c419c607"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""9a1ad1ab-aeb2-4969-bd39-0cf68dac3483"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Backward"",
                    ""type"": ""Button"",
                    ""id"": ""69d0b569-a1c8-4fed-bdf3-117f2b2e9fd1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""9b9c2cde-644d-4e43-b26e-72eb2c0c658c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""58d43260-9928-4521-af80-f25f9be6dd1e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aca7a4b0-f78f-411c-b311-59c025458777"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4eed601-09f8-4bf6-8c17-508d744e16d3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78362f9f-d36b-4049-808d-081e6fb72c7e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93048bfc-9aa7-443a-9f11-c80086d9597f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""WeaponRotation"",
            ""id"": ""6bc235c5-1144-47df-8174-6b6fc0c80df3"",
            ""actions"": [
                {
                    ""name"": ""MouseInput"",
                    ""type"": ""Value"",
                    ""id"": ""faf3b6f3-b0f4-468f-8a14-1a5c84e179e5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""d2131183-a5b8-474f-89b3-38295ad32c82"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5f0ab8db-01f5-4312-a67b-d61dcc49d184"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9979ceff-bf66-43b2-a105-1a499e776711"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CarMovement
        m_CarMovement = asset.FindActionMap("CarMovement", throwIfNotFound: true);
        m_CarMovement_Forward = m_CarMovement.FindAction("Forward", throwIfNotFound: true);
        m_CarMovement_Backward = m_CarMovement.FindAction("Backward", throwIfNotFound: true);
        m_CarMovement_Left = m_CarMovement.FindAction("Left", throwIfNotFound: true);
        m_CarMovement_Right = m_CarMovement.FindAction("Right", throwIfNotFound: true);
        // WeaponRotation
        m_WeaponRotation = asset.FindActionMap("WeaponRotation", throwIfNotFound: true);
        m_WeaponRotation_MouseInput = m_WeaponRotation.FindAction("MouseInput", throwIfNotFound: true);
        m_WeaponRotation_Shoot = m_WeaponRotation.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CarMovement
    private readonly InputActionMap m_CarMovement;
    private List<ICarMovementActions> m_CarMovementActionsCallbackInterfaces = new List<ICarMovementActions>();
    private readonly InputAction m_CarMovement_Forward;
    private readonly InputAction m_CarMovement_Backward;
    private readonly InputAction m_CarMovement_Left;
    private readonly InputAction m_CarMovement_Right;
    public struct CarMovementActions
    {
        private @InputSystem m_Wrapper;
        public CarMovementActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Forward => m_Wrapper.m_CarMovement_Forward;
        public InputAction @Backward => m_Wrapper.m_CarMovement_Backward;
        public InputAction @Left => m_Wrapper.m_CarMovement_Left;
        public InputAction @Right => m_Wrapper.m_CarMovement_Right;
        public InputActionMap Get() { return m_Wrapper.m_CarMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CarMovementActions set) { return set.Get(); }
        public void AddCallbacks(ICarMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_CarMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CarMovementActionsCallbackInterfaces.Add(instance);
            @Forward.started += instance.OnForward;
            @Forward.performed += instance.OnForward;
            @Forward.canceled += instance.OnForward;
            @Backward.started += instance.OnBackward;
            @Backward.performed += instance.OnBackward;
            @Backward.canceled += instance.OnBackward;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
        }

        private void UnregisterCallbacks(ICarMovementActions instance)
        {
            @Forward.started -= instance.OnForward;
            @Forward.performed -= instance.OnForward;
            @Forward.canceled -= instance.OnForward;
            @Backward.started -= instance.OnBackward;
            @Backward.performed -= instance.OnBackward;
            @Backward.canceled -= instance.OnBackward;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
        }

        public void RemoveCallbacks(ICarMovementActions instance)
        {
            if (m_Wrapper.m_CarMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICarMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_CarMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CarMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CarMovementActions @CarMovement => new CarMovementActions(this);

    // WeaponRotation
    private readonly InputActionMap m_WeaponRotation;
    private List<IWeaponRotationActions> m_WeaponRotationActionsCallbackInterfaces = new List<IWeaponRotationActions>();
    private readonly InputAction m_WeaponRotation_MouseInput;
    private readonly InputAction m_WeaponRotation_Shoot;
    public struct WeaponRotationActions
    {
        private @InputSystem m_Wrapper;
        public WeaponRotationActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseInput => m_Wrapper.m_WeaponRotation_MouseInput;
        public InputAction @Shoot => m_Wrapper.m_WeaponRotation_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_WeaponRotation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponRotationActions set) { return set.Get(); }
        public void AddCallbacks(IWeaponRotationActions instance)
        {
            if (instance == null || m_Wrapper.m_WeaponRotationActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WeaponRotationActionsCallbackInterfaces.Add(instance);
            @MouseInput.started += instance.OnMouseInput;
            @MouseInput.performed += instance.OnMouseInput;
            @MouseInput.canceled += instance.OnMouseInput;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IWeaponRotationActions instance)
        {
            @MouseInput.started -= instance.OnMouseInput;
            @MouseInput.performed -= instance.OnMouseInput;
            @MouseInput.canceled -= instance.OnMouseInput;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IWeaponRotationActions instance)
        {
            if (m_Wrapper.m_WeaponRotationActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWeaponRotationActions instance)
        {
            foreach (var item in m_Wrapper.m_WeaponRotationActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WeaponRotationActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WeaponRotationActions @WeaponRotation => new WeaponRotationActions(this);
    public interface ICarMovementActions
    {
        void OnForward(InputAction.CallbackContext context);
        void OnBackward(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
    }
    public interface IWeaponRotationActions
    {
        void OnMouseInput(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
